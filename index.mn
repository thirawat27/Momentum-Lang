// This file tests all features of the Momentum language.

print("--- Momentum Language Feature Test ---")
print("")

// 1. Comments, Variables, Data Types, and Print
print("--- 1. Testing Variables, Types, and Print ---")
let my_integer = 100
let my_float = 123.45
let my_string = "Hello, Momentum!"
let is_true = 1 // Use 1 for true

print("Integer: " + str(my_integer))
print("Float: " + str(my_float))
print("String: " + my_string)
print("Type of my_float is: " + type(my_float))
print("")

// 2. Input
print("--- 2. Testing Input ---")
input user_name, "What is your name? "
print("Nice to meet you, " + user_name)
print("")

// 3. Operators (Arithmetic, Comparison, Logical)
print("--- 3. Testing Operators ---")
let a = 10
let b = 4
print("a + b = " + str(a + b))
print("a * b = " + str(a * b))
print("a / b = " + str(a / b))
print("a > b is " + str(a > b))
print("a == b is " + str(a == b))
print("Logical AND: (a > 5 and b < 5) is " + str(a > 5 and b < 5))
print("Logical NOT: not(a == b) is " + str(not(a == b)))
print("")

// 4. Control Structures (IF/ELSEIF/ELSE)
print("--- 4. Testing IF/ELSEIF/ELSE ---")
let grade = 85
if grade >= 80 and grade <= 100 then
    print("Grade is A")
else if grade >= 70 then
    print("Grade is B")
else
    print("Grade is C or below")
end if
print("")

// 5. Loops (FOR and WHILE)
print("--- 5. Testing Loops ---")
print("FOR loop (counting up):")
for i = 1 to 3
    print(" i = " + str(i))
next i

print("FOR loop (counting down with step):")
for j = 5 to 1 step -2
    print(" j = " + str(j))
next j

print("WHILE loop:")
let k = 3
while k > 0
    print(" k = " + str(k))
    let k = k - 1
wend
print("")

// 6. Arrays (DIM)
print("--- 6. Testing Arrays ---")
// 1D Array
dim scores(3)
let scores(0) = 95
let scores(1) = 88
let scores(2) = 100
print("Second score is: " + str(scores(1)))
print("Length of scores array: " + str(len(scores)))

// 2D Array
dim matrix(2, 3) // 2 rows, 3 columns
let matrix(0, 0) = 1
let matrix(1, 2) = 99
print("Value in matrix at (1, 2) is: " + str(matrix(1, 2)))
print("")

// 7. Functions and Procedures
print("--- 7. Testing Functions ---")
function multiply(x, y)
    return x * y
end function

let product = multiply(7, 6)
print("7 * 6 = " + str(product))

function show_message(msg)
    print("Message: " + msg)
end function

show_message("Functions are working!")
print("")

// 8. DATA, READ, RESTORE
print("--- 8. Testing DATA, READ, RESTORE ---")
data "Apple", 1.25, "Banana", 0.75

let fruit_name = ""
let fruit_price = 0.0

read fruit_name, fruit_price
print("Read: " + fruit_name + ", Price: " + str(fruit_price))

read fruit_name, fruit_price
print("Read: " + fruit_name + ", Price: " + str(fruit_price))

restore
read fruit_name, fruit_price
print("After RESTORE, read again: " + fruit_name + ", Price: " + str(fruit_price))
print("")

// 9. Built-in Functions
print("--- 9. Testing Other Built-in Functions ---")
print("abs(-10.5) = " + str(abs(-10.5)))
print("sqrt(16) = " + str(sqrt(16)))
print("round(3.14159) = " + str(round(3.14159)))
let start_time = time()
print("Current time (timestamp): " + str(start_time))
print("")


// 10. Advanced Features: JIT (Just-In-Time) Compilation
print("--- 10. Testing JIT Compilation (requires Numba) ---")
jit_function calculate_pi(iterations)
    let pi_div_4 = 0.0
    let sign = 1.0
    for i = 0 to iterations - 1
        let term = 1.0 / (2.0 * i + 1.0)
        let pi_div_4 = pi_div_4 + (sign * term)
        let sign = -sign
    next i
    return pi_div_4 * 4.0
end function

let start_jit = time()
let my_pi = calculate_pi(1000000)
let end_jit = time()
print("JIT Pi Calculation (1st run): " + str(my_pi) + " in " + str(end_jit - start_jit) + "s")

let start_jit2 = time()
let my_pi2 = calculate_pi(1000000)
let end_jit2 = time()
print("JIT Pi Calculation (2nd run): " + str(my_pi2) + " in " + str(end_jit2 - start_jit2) + "s")
print("")


// 11. Advanced Features: Asynchronous Programming
print("--- 11. Testing Asynchronous Programming ---")

async function fetch_data(source, delay)
    print("Fetching from " + source + "...")
    await sleep(delay)
    print("...Finished fetching from " + source)
    return "Data from " + source
end function

// Test 1: Using 'run async' to run tasks concurrently (fire and forget)
print("Test 1: Firing off multiple tasks with RUN ASYNC...")
let async_start = time()
run async fetch_data("Server A", 2), fetch_data("Server B", 1)
let async_end = time()

print("Async tasks launched. Main program continues immediately.")
print("Time elapsed during launch (should be very small): " + str(async_end - async_start) + "s")
await sleep(2.5) // Wait for the longest task to finish before next test
print("")


// Test 2: Using 'await' to wait for a single result
print("Test 2: Waiting for a single result with AWAIT...")
let await_start = time()
let single_result = await fetch_data("API C", 1.5)
let await_end = time()
print("Result received: '" + single_result + "'")
print("Time elapsed for await (should be ~1.5s): " + str(await_end - await_start) + "s")
print("")


print("--- All tests completed. ---")